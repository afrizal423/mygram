definitions:
  errors.RestErr:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: integer
    type: object
  models.Comment:
    properties:
      created_at:
        type: string
      id:
        type: integer
      message:
        type: string
      photo:
        $ref: '#/definitions/models.Photo'
      photo_id:
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.Photo:
    properties:
      caption:
        type: string
      created_at:
        type: string
      id:
        type: integer
      photo_url:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.RequestComments:
    properties:
      message:
        type: string
      photo_id:
        type: integer
    type: object
  models.RequestPhoto:
    properties:
      caption:
        type: string
      photo_url:
        type: string
      title:
        type: string
    required:
    - photo_url
    - title
    type: object
  models.RequestSocialMedia:
    properties:
      name:
        type: string
      social_media_url:
        type: string
    type: object
  models.SocialMedia:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      social_media_url:
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.User:
    properties:
      age:
        type: integer
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      photos:
        items:
          $ref: '#/definitions/models.Photo'
        type: array
      socialmedias:
        items:
          $ref: '#/definitions/models.SocialMedia'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: ansharw
  description: This is a sample server MyGram server.
  title: Swagger MyGram API
  version: "1.0"
paths:
  /comment:
    get:
      consumes:
      - application/json
      description: Get all Comment user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.RestErr'
      security:
      - JWT: []
      summary: Get all Comment user
      tags:
      - Comment
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Create Comment user
      parameters:
      - description: Create Comment user
        in: body
        name: requestCreate
        required: true
        schema:
          $ref: '#/definitions/models.RequestComments'
      produces:
      - application/json
      - application/x-www-form-urlencoded
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RequestComments'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestErr'
      security:
      - JWT: []
      summary: Create Comment user
      tags:
      - Comment
  /comment/{commentId}:
    delete:
      consumes:
      - application/json
      description: Delete Comment user
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Delete Comment user
      tags:
      - Comment
    get:
      consumes:
      - application/json
      description: Get Comment user
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.RestErr'
      security:
      - JWT: []
      summary: Get Comment user
      tags:
      - Comment
    put:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Update Comment user
      parameters:
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: integer
      - description: Update Comment user
        in: body
        name: requestUpdate
        required: true
        schema:
          $ref: '#/definitions/models.RequestComments'
      produces:
      - application/json
      - application/x-www-form-urlencoded
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestErr'
      security:
      - JWT: []
      summary: Update Comment user
      tags:
      - Comment
  /photo:
    get:
      consumes:
      - application/json
      description: Get all photo user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Photo'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.RestErr'
      security:
      - JWT: []
      summary: Get all photo user
      tags:
      - Photo
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Create photo user
      parameters:
      - description: Create Photo user
        in: body
        name: requestCreate
        required: true
        schema:
          $ref: '#/definitions/models.RequestPhoto'
      produces:
      - application/json
      - application/x-www-form-urlencoded
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Photo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestErr'
      security:
      - JWT: []
      summary: Create photo user
      tags:
      - Photo
  /photo/{photoId}:
    delete:
      consumes:
      - application/json
      description: Delete photo user
      parameters:
      - description: Photo ID
        in: path
        name: photoId
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Delete photo user
      tags:
      - Photo
    get:
      consumes:
      - application/json
      description: Get photo user
      parameters:
      - description: Photo ID
        in: path
        name: photoId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.RestErr'
      security:
      - JWT: []
      summary: Get photo user
      tags:
      - Photo
    put:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Update photo user
      parameters:
      - description: Photo ID
        in: path
        name: photoId
        required: true
        type: integer
      - description: Update Photo user
        in: body
        name: requestUpdate
        required: true
        schema:
          $ref: '#/definitions/models.RequestPhoto'
      produces:
      - application/json
      - application/x-www-form-urlencoded
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Photo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestErr'
      security:
      - JWT: []
      summary: Update photo user
      tags:
      - Photo
  /socialmedia:
    get:
      consumes:
      - application/json
      description: Get all social media user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SocialMedia'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.RestErr'
      security:
      - JWT: []
      summary: Get all social media user
      tags:
      - Social Media
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Create social media user
      parameters:
      - description: Create social media user
        in: body
        name: requestCreate
        required: true
        schema:
          $ref: '#/definitions/models.RequestSocialMedia'
      produces:
      - application/json
      - application/x-www-form-urlencoded
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RequestSocialMedia'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestErr'
      security:
      - JWT: []
      summary: Create social media user
      tags:
      - Social Media
  /socialmedia/{socialMediaId}:
    delete:
      consumes:
      - application/json
      description: Delete social media user
      parameters:
      - description: Social Media ID
        in: path
        name: socialMediaId
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - JWT: []
      summary: Delete social media user
      tags:
      - Social Media
    get:
      consumes:
      - application/json
      description: Get social media user
      parameters:
      - description: Social Media ID
        in: path
        name: socialMediaId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.RestErr'
      security:
      - JWT: []
      summary: Get social media user
      tags:
      - Social Media
    put:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Update social media user
      parameters:
      - description: Social Media ID
        in: path
        name: socialMediaId
        required: true
        type: integer
      - description: Update Social Media user
        in: body
        name: requestUpdate
        required: true
        schema:
          $ref: '#/definitions/models.RequestSocialMedia'
      produces:
      - application/json
      - application/x-www-form-urlencoded
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SocialMedia'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestErr'
      security:
      - JWT: []
      summary: Update social media user
      tags:
      - Social Media
  /users/login:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Login user
      parameters:
      - description: login user
        in: body
        name: requestLogin
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      - application/x-www-form-urlencoded
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.RestErr'
      summary: Login user
      tags:
      - User
  /users/register:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: Register user
      parameters:
      - description: Register user
        in: body
        name: requestRegister
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      - application/x-www-form-urlencoded
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.RestErr'
      summary: Register user
      tags:
      - User
securityDefinitions:
  JWT:
    description: 'description: Enter the token with the `Bearer: ` prefix, e.g. "Bearer
      abcde12345".'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
